// Copyright 2017-2019 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// Custom Widgets for ZPerKWeapons
// Adds tooltips to widgets
//
// Some redundant duplicates here but whatever; menus are painful to work
// with in general anyway. >:(
//
//===========================================================================

class OptionMenuItemZPerkOption : OptionMenuItemOption
{
	String mTooltip;

	OptionMenuItemZPerkOption Init(String label, String tooltip, Name command, Name values, CVar graycheck = null, int center = 0)
	{
		mTooltip = tooltip;
		Super.Init(label, command, values, graycheck, center);
		return self;
	}
}

class OptionMenuItemZPerkSlider : OptionMenuItemSlider
{
	String mTooltip;
	CVar mGrayCheck;

	OptionMenuItemZPerkSlider Init(String label, String tooltip, Name command, double min, double max, double step, int showval = 1, CVar graycheck = NULL)
	{
		mTooltip = tooltip;
		Super.Init(label, command, min, max, step, showval);
		mGrayCheck = graycheck;
		return self;
	}

	override bool IsGrayed(void)
	{
		return mGrayCheck != NULL && !mGrayCheck.GetInt();
	}

	override bool Selectable(void)
	{
		return !IsGrayed();
	}

	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		bool grayed = mGrayCheck != null && !mGrayCheck.GetInt();
		drawLabel(indent, y, selected ? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor, grayed);
		mDrawX = indent + CursorSpace();
		DrawSlider (mDrawX, y, mMin, mMax, GetSliderValue(), mShowValue, indent);
		return indent;
	}
}

class OptionMenuItemZPerkControl : OptionMenuItemControl
{
	String mTooltip;

	OptionMenuItemZPerkControl Init(String label, String tooltip, Name command)
	{
		mTooltip = tooltip;
		Super.Init(label, command);
		return self;
	}
}

/*
// This doesn't work because mUh eXpLoiTs lmaaaaoooo
class OptionMenuItemZPerkSafeCommand : OptionMenuItemSafeCommand
{
	String mTooltip;

	OptionMenuItemZPerkSafeCommand Init(String label, String tooltip, Name command, String prompt = "")
	{
		mTooltip = tooltip;
		Super.Init(label, command, prompt);
		return self;
	}
}
*/

//===========================================================================
//
// ZPerKWeapons Menu
//
//===========================================================================

class ZPerkMenu : OptionMenu
{
	const START_TIME = 75;
	const END_TIME = 120;
	const SCROLL_SPEED = 8;
	const MAX_ASPECT = 16 / 9.;

	int mDefaultPosition;
	String mTooltip;

	private int startTimer;
	private int endTimer;
	private int scrollTimer;
	private int prevSelected;

	override void Init(Menu parent, OptionMenuDescriptor desc)
	{
		Super.Init(parent, desc);

		mDefaultPosition = mDesc.mPosition;
		prevSelected = -1;
	}

	override void Drawer(void)
	{
		mToolTip = "";

		if (mDesc.mSelectedItem >= 0)
		{
			let item = mDesc.mItems[mDesc.mSelectedItem];
			if (item is "OptionMenuItemZPerkOption")
			{
				mToolTip = StringTable.Localize(OptionMenuItemZPerkOption(item).mTooltip);
			}
			else if (item is "OptionMenuItemZPerkSlider")
			{
				mToolTip = StringTable.Localize(OptionMenuItemZPerkSlider(item).mTooltip);
			}
			else if (item is "OptionMenuItemZPerkControl")
			{
				mToolTip = StringTable.Localize(OptionMenuItemZPerkControl(item).mTooltip);
			}
		}

		Font of = OptionFont();
		int fHeight = of.GetHeight() * CleanYFac_1;
		int padding = fHeight << 1;

		if (prevSelected != mDesc.mSelectedItem)
		{
			startTimer = START_TIME;
			endTimer = 0;
			scrollTimer = 0;
		}

		if (mToolTip.Length() > 0)
		{
			int realWidth = Screen.GetWidth();
			int height = Screen.GetHeight();

			int width = realWidth;
			if (width / height > MAX_ASPECT)
			{
				width = int(height * MAX_ASPECT);
			}

			int textBoxWidth = int(width * 3 / 4.);
			int textBoxStart = width / 8 + (realWidth - width) / 2;

			int length = of.StringWidth(mToolTip) * CleanXFac_1;
			int xOfs = (realWidth - length) / 2;
			if (length > textBoxWidth)
			{
				xOfs = textBoxStart;
				if (startTimer <= 0)
				{
					xOfs -= SCROLL_SPEED * (endTimer <= 0 ? scrollTimer++ : scrollTimer);

					int end = xOfs + length;
					if (endTimer > 0 || end < textBoxStart + textBoxWidth)
					{
						xOfs += (textBoxStart + textBoxWidth - end);
						if (endTimer <= 0)
						{
							endtimer = END_TIME;
						}
					}
				}

				if (endTimer <= 0)
				{
					textBoxWidth -= of.StringWidth("...") * CleanXFac_1;
				}
			}

			int cx, cy, cw, ch;
			[cx, cy, cw, ch] = Screen.GetClipRect();
			Screen.SetClipRect(textBoxStart, padding, textBoxWidth, fHeight);

			Screen.DrawText(of, OptionMenuSettings.mFontColorValue,
							xOfs, padding,
							mToolTip,
							DTA_CleanNoMove_1, true);

			Screen.SetClipRect(cx, cy, cw, ch);

			if (length > textBoxWidth && endTimer <= 0)
			{
				Screen.DrawText(of, OptionMenuSettings.mFontColorValue,
								textBoxStart+textBoxWidth, padding,
								"...",
								DTA_CleanNoMove_1, true);
			}
		}

		if (startTimer > 0)
		{
			startTimer--;
		}

		if (endTimer > 0)
		{
			endTimer--;
			if (endTimer <= 0)
			{
				scrollTimer = 0;
				startTimer = START_TIME;
			}
		}

		int shift = -padding / CleanYFac_1;
		if (shift > mDefaultPosition)
			shift = mDefaultPosition;

		mDesc.mPosition = shift;
		prevSelected = mDesc.mSelectedItem;

		Super.Drawer();

		mDesc.mPosition = mDefaultPosition;
	}
}
